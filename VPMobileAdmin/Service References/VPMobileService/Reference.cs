//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VPMobileAdmin.VPMobileService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VPMobileService.IVPMobileService")]
    public interface IVPMobileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetConfig", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigResponse")]
        VPMobileObjects.VPMobileSettings GetConfig(string session, string configName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetConfig", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigResponse")]
        System.IAsyncResult BeginGetConfig(string session, string configName, System.AsyncCallback callback, object asyncState);
        
        VPMobileObjects.VPMobileSettings EndGetConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetConfigs", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigsResponse")]
        System.Tuple<string, string>[] GetConfigs(string session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetConfigs", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigsResponse")]
        System.IAsyncResult BeginGetConfigs(string session, System.AsyncCallback callback, object asyncState);
        
        System.Tuple<string, string>[] EndGetConfigs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/UpdateConfig", ReplyAction="http://tempuri.org/IVPMobileService/UpdateConfigResponse")]
        bool UpdateConfig(string session, VPMobileObjects.VPMobileSettings config);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/UpdateConfig", ReplyAction="http://tempuri.org/IVPMobileService/UpdateConfigResponse")]
        System.IAsyncResult BeginUpdateConfig(string session, VPMobileObjects.VPMobileSettings config, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/AddConfig", ReplyAction="http://tempuri.org/IVPMobileService/AddConfigResponse")]
        bool AddConfig(string session, VPMobileObjects.VPMobileSettings config);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/AddConfig", ReplyAction="http://tempuri.org/IVPMobileService/AddConfigResponse")]
        System.IAsyncResult BeginAddConfig(string session, VPMobileObjects.VPMobileSettings config, System.AsyncCallback callback, object asyncState);
        
        bool EndAddConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfo", ReplyAction="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfoResponse")]
        VPMobileObjects.RoutingFileInfo[] GetAllRoutingFileInfo(string session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfo", ReplyAction="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfoResponse")]
        System.IAsyncResult BeginGetAllRoutingFileInfo(string session, System.AsyncCallback callback, object asyncState);
        
        VPMobileObjects.RoutingFileInfo[] EndGetAllRoutingFileInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/DeleteConfig", ReplyAction="http://tempuri.org/IVPMobileService/DeleteConfigResponse")]
        bool DeleteConfig(string session, string configName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/DeleteConfig", ReplyAction="http://tempuri.org/IVPMobileService/DeleteConfigResponse")]
        System.IAsyncResult BeginDeleteConfig(string session, string configName, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetMainUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileListResponse")]
        VPMobileObjects.UpdateFileInfo[] GetMainUpdateFileList(string session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetMainUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileListResponse")]
        System.IAsyncResult BeginGetMainUpdateFileList(string session, System.AsyncCallback callback, object asyncState);
        
        VPMobileObjects.UpdateFileInfo[] EndGetMainUpdateFileList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileListResponse")]
        VPMobileObjects.UpdateFileInfo[] GetSplashUpdateFileList(string session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileListResponse")]
        System.IAsyncResult BeginGetSplashUpdateFileList(string session, System.AsyncCallback callback, object asyncState);
        
        VPMobileObjects.UpdateFileInfo[] EndGetSplashUpdateFileList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetMainUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileResponse")]
        byte[] GetMainUpdateFile(string session, string relativePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetMainUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileResponse")]
        System.IAsyncResult BeginGetMainUpdateFile(string session, string relativePath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetMainUpdateFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileResponse")]
        byte[] GetSplashUpdateFile(string session, string relativePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileResponse")]
        System.IAsyncResult BeginGetSplashUpdateFile(string session, string relativePath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetSplashUpdateFile(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVPMobileServiceChannel : VPMobileAdmin.VPMobileService.IVPMobileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileObjects.VPMobileSettings Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileObjects.VPMobileSettings)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Tuple<string, string>[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Tuple<string, string>[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllRoutingFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllRoutingFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileObjects.RoutingFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileObjects.RoutingFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMainUpdateFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMainUpdateFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileObjects.UpdateFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileObjects.UpdateFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSplashUpdateFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSplashUpdateFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileObjects.UpdateFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileObjects.UpdateFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMainUpdateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMainUpdateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSplashUpdateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSplashUpdateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VPMobileServiceClient : System.ServiceModel.ClientBase<VPMobileAdmin.VPMobileService.IVPMobileService>, VPMobileAdmin.VPMobileService.IVPMobileService {
        
        private BeginOperationDelegate onBeginGetConfigDelegate;
        
        private EndOperationDelegate onEndGetConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConfigsDelegate;
        
        private EndOperationDelegate onEndGetConfigsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateConfigDelegate;
        
        private EndOperationDelegate onEndUpdateConfigDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddConfigDelegate;
        
        private EndOperationDelegate onEndAddConfigDelegate;
        
        private System.Threading.SendOrPostCallback onAddConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllRoutingFileInfoDelegate;
        
        private EndOperationDelegate onEndGetAllRoutingFileInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllRoutingFileInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteConfigDelegate;
        
        private EndOperationDelegate onEndDeleteConfigDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMainUpdateFileListDelegate;
        
        private EndOperationDelegate onEndGetMainUpdateFileListDelegate;
        
        private System.Threading.SendOrPostCallback onGetMainUpdateFileListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSplashUpdateFileListDelegate;
        
        private EndOperationDelegate onEndGetSplashUpdateFileListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSplashUpdateFileListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMainUpdateFileDelegate;
        
        private EndOperationDelegate onEndGetMainUpdateFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetMainUpdateFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSplashUpdateFileDelegate;
        
        private EndOperationDelegate onEndGetSplashUpdateFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetSplashUpdateFileCompletedDelegate;
        
        public VPMobileServiceClient() {
        }
        
        public VPMobileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VPMobileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VPMobileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VPMobileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetConfigCompletedEventArgs> GetConfigCompleted;
        
        public event System.EventHandler<GetConfigsCompletedEventArgs> GetConfigsCompleted;
        
        public event System.EventHandler<UpdateConfigCompletedEventArgs> UpdateConfigCompleted;
        
        public event System.EventHandler<AddConfigCompletedEventArgs> AddConfigCompleted;
        
        public event System.EventHandler<GetAllRoutingFileInfoCompletedEventArgs> GetAllRoutingFileInfoCompleted;
        
        public event System.EventHandler<DeleteConfigCompletedEventArgs> DeleteConfigCompleted;
        
        public event System.EventHandler<GetMainUpdateFileListCompletedEventArgs> GetMainUpdateFileListCompleted;
        
        public event System.EventHandler<GetSplashUpdateFileListCompletedEventArgs> GetSplashUpdateFileListCompleted;
        
        public event System.EventHandler<GetMainUpdateFileCompletedEventArgs> GetMainUpdateFileCompleted;
        
        public event System.EventHandler<GetSplashUpdateFileCompletedEventArgs> GetSplashUpdateFileCompleted;
        
        public VPMobileObjects.VPMobileSettings GetConfig(string session, string configName) {
            return base.Channel.GetConfig(session, configName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfig(string session, string configName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfig(session, configName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileObjects.VPMobileSettings EndGetConfig(System.IAsyncResult result) {
            return base.Channel.EndGetConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            string configName = ((string)(inValues[1]));
            return this.BeginGetConfig(session, configName, callback, asyncState);
        }
        
        private object[] OnEndGetConfig(System.IAsyncResult result) {
            VPMobileObjects.VPMobileSettings retVal = this.EndGetConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigCompleted(object state) {
            if ((this.GetConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigCompleted(this, new GetConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigAsync(string session, string configName) {
            this.GetConfigAsync(session, configName, null);
        }
        
        public void GetConfigAsync(string session, string configName, object userState) {
            if ((this.onBeginGetConfigDelegate == null)) {
                this.onBeginGetConfigDelegate = new BeginOperationDelegate(this.OnBeginGetConfig);
            }
            if ((this.onEndGetConfigDelegate == null)) {
                this.onEndGetConfigDelegate = new EndOperationDelegate(this.OnEndGetConfig);
            }
            if ((this.onGetConfigCompletedDelegate == null)) {
                this.onGetConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigDelegate, new object[] {
                        session,
                        configName}, this.onEndGetConfigDelegate, this.onGetConfigCompletedDelegate, userState);
        }
        
        public System.Tuple<string, string>[] GetConfigs(string session) {
            return base.Channel.GetConfigs(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfigs(string session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfigs(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Tuple<string, string>[] EndGetConfigs(System.IAsyncResult result) {
            return base.Channel.EndGetConfigs(result);
        }
        
        private System.IAsyncResult OnBeginGetConfigs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            return this.BeginGetConfigs(session, callback, asyncState);
        }
        
        private object[] OnEndGetConfigs(System.IAsyncResult result) {
            System.Tuple<string, string>[] retVal = this.EndGetConfigs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigsCompleted(object state) {
            if ((this.GetConfigsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigsCompleted(this, new GetConfigsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigsAsync(string session) {
            this.GetConfigsAsync(session, null);
        }
        
        public void GetConfigsAsync(string session, object userState) {
            if ((this.onBeginGetConfigsDelegate == null)) {
                this.onBeginGetConfigsDelegate = new BeginOperationDelegate(this.OnBeginGetConfigs);
            }
            if ((this.onEndGetConfigsDelegate == null)) {
                this.onEndGetConfigsDelegate = new EndOperationDelegate(this.OnEndGetConfigs);
            }
            if ((this.onGetConfigsCompletedDelegate == null)) {
                this.onGetConfigsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigsDelegate, new object[] {
                        session}, this.onEndGetConfigsDelegate, this.onGetConfigsCompletedDelegate, userState);
        }
        
        public bool UpdateConfig(string session, VPMobileObjects.VPMobileSettings config) {
            return base.Channel.UpdateConfig(session, config);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateConfig(string session, VPMobileObjects.VPMobileSettings config, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateConfig(session, config, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateConfig(System.IAsyncResult result) {
            return base.Channel.EndUpdateConfig(result);
        }
        
        private System.IAsyncResult OnBeginUpdateConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            VPMobileObjects.VPMobileSettings config = ((VPMobileObjects.VPMobileSettings)(inValues[1]));
            return this.BeginUpdateConfig(session, config, callback, asyncState);
        }
        
        private object[] OnEndUpdateConfig(System.IAsyncResult result) {
            bool retVal = this.EndUpdateConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateConfigCompleted(object state) {
            if ((this.UpdateConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateConfigCompleted(this, new UpdateConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateConfigAsync(string session, VPMobileObjects.VPMobileSettings config) {
            this.UpdateConfigAsync(session, config, null);
        }
        
        public void UpdateConfigAsync(string session, VPMobileObjects.VPMobileSettings config, object userState) {
            if ((this.onBeginUpdateConfigDelegate == null)) {
                this.onBeginUpdateConfigDelegate = new BeginOperationDelegate(this.OnBeginUpdateConfig);
            }
            if ((this.onEndUpdateConfigDelegate == null)) {
                this.onEndUpdateConfigDelegate = new EndOperationDelegate(this.OnEndUpdateConfig);
            }
            if ((this.onUpdateConfigCompletedDelegate == null)) {
                this.onUpdateConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateConfigCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateConfigDelegate, new object[] {
                        session,
                        config}, this.onEndUpdateConfigDelegate, this.onUpdateConfigCompletedDelegate, userState);
        }
        
        public bool AddConfig(string session, VPMobileObjects.VPMobileSettings config) {
            return base.Channel.AddConfig(session, config);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddConfig(string session, VPMobileObjects.VPMobileSettings config, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddConfig(session, config, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddConfig(System.IAsyncResult result) {
            return base.Channel.EndAddConfig(result);
        }
        
        private System.IAsyncResult OnBeginAddConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            VPMobileObjects.VPMobileSettings config = ((VPMobileObjects.VPMobileSettings)(inValues[1]));
            return this.BeginAddConfig(session, config, callback, asyncState);
        }
        
        private object[] OnEndAddConfig(System.IAsyncResult result) {
            bool retVal = this.EndAddConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddConfigCompleted(object state) {
            if ((this.AddConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddConfigCompleted(this, new AddConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddConfigAsync(string session, VPMobileObjects.VPMobileSettings config) {
            this.AddConfigAsync(session, config, null);
        }
        
        public void AddConfigAsync(string session, VPMobileObjects.VPMobileSettings config, object userState) {
            if ((this.onBeginAddConfigDelegate == null)) {
                this.onBeginAddConfigDelegate = new BeginOperationDelegate(this.OnBeginAddConfig);
            }
            if ((this.onEndAddConfigDelegate == null)) {
                this.onEndAddConfigDelegate = new EndOperationDelegate(this.OnEndAddConfig);
            }
            if ((this.onAddConfigCompletedDelegate == null)) {
                this.onAddConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddConfigCompleted);
            }
            base.InvokeAsync(this.onBeginAddConfigDelegate, new object[] {
                        session,
                        config}, this.onEndAddConfigDelegate, this.onAddConfigCompletedDelegate, userState);
        }
        
        public VPMobileObjects.RoutingFileInfo[] GetAllRoutingFileInfo(string session) {
            return base.Channel.GetAllRoutingFileInfo(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllRoutingFileInfo(string session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllRoutingFileInfo(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileObjects.RoutingFileInfo[] EndGetAllRoutingFileInfo(System.IAsyncResult result) {
            return base.Channel.EndGetAllRoutingFileInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetAllRoutingFileInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            return this.BeginGetAllRoutingFileInfo(session, callback, asyncState);
        }
        
        private object[] OnEndGetAllRoutingFileInfo(System.IAsyncResult result) {
            VPMobileObjects.RoutingFileInfo[] retVal = this.EndGetAllRoutingFileInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllRoutingFileInfoCompleted(object state) {
            if ((this.GetAllRoutingFileInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllRoutingFileInfoCompleted(this, new GetAllRoutingFileInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllRoutingFileInfoAsync(string session) {
            this.GetAllRoutingFileInfoAsync(session, null);
        }
        
        public void GetAllRoutingFileInfoAsync(string session, object userState) {
            if ((this.onBeginGetAllRoutingFileInfoDelegate == null)) {
                this.onBeginGetAllRoutingFileInfoDelegate = new BeginOperationDelegate(this.OnBeginGetAllRoutingFileInfo);
            }
            if ((this.onEndGetAllRoutingFileInfoDelegate == null)) {
                this.onEndGetAllRoutingFileInfoDelegate = new EndOperationDelegate(this.OnEndGetAllRoutingFileInfo);
            }
            if ((this.onGetAllRoutingFileInfoCompletedDelegate == null)) {
                this.onGetAllRoutingFileInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllRoutingFileInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllRoutingFileInfoDelegate, new object[] {
                        session}, this.onEndGetAllRoutingFileInfoDelegate, this.onGetAllRoutingFileInfoCompletedDelegate, userState);
        }
        
        public bool DeleteConfig(string session, string configName) {
            return base.Channel.DeleteConfig(session, configName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteConfig(string session, string configName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteConfig(session, configName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteConfig(System.IAsyncResult result) {
            return base.Channel.EndDeleteConfig(result);
        }
        
        private System.IAsyncResult OnBeginDeleteConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            string configName = ((string)(inValues[1]));
            return this.BeginDeleteConfig(session, configName, callback, asyncState);
        }
        
        private object[] OnEndDeleteConfig(System.IAsyncResult result) {
            bool retVal = this.EndDeleteConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteConfigCompleted(object state) {
            if ((this.DeleteConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteConfigCompleted(this, new DeleteConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteConfigAsync(string session, string configName) {
            this.DeleteConfigAsync(session, configName, null);
        }
        
        public void DeleteConfigAsync(string session, string configName, object userState) {
            if ((this.onBeginDeleteConfigDelegate == null)) {
                this.onBeginDeleteConfigDelegate = new BeginOperationDelegate(this.OnBeginDeleteConfig);
            }
            if ((this.onEndDeleteConfigDelegate == null)) {
                this.onEndDeleteConfigDelegate = new EndOperationDelegate(this.OnEndDeleteConfig);
            }
            if ((this.onDeleteConfigCompletedDelegate == null)) {
                this.onDeleteConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteConfigCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteConfigDelegate, new object[] {
                        session,
                        configName}, this.onEndDeleteConfigDelegate, this.onDeleteConfigCompletedDelegate, userState);
        }
        
        public VPMobileObjects.UpdateFileInfo[] GetMainUpdateFileList(string session) {
            return base.Channel.GetMainUpdateFileList(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMainUpdateFileList(string session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMainUpdateFileList(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileObjects.UpdateFileInfo[] EndGetMainUpdateFileList(System.IAsyncResult result) {
            return base.Channel.EndGetMainUpdateFileList(result);
        }
        
        private System.IAsyncResult OnBeginGetMainUpdateFileList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            return this.BeginGetMainUpdateFileList(session, callback, asyncState);
        }
        
        private object[] OnEndGetMainUpdateFileList(System.IAsyncResult result) {
            VPMobileObjects.UpdateFileInfo[] retVal = this.EndGetMainUpdateFileList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMainUpdateFileListCompleted(object state) {
            if ((this.GetMainUpdateFileListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMainUpdateFileListCompleted(this, new GetMainUpdateFileListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMainUpdateFileListAsync(string session) {
            this.GetMainUpdateFileListAsync(session, null);
        }
        
        public void GetMainUpdateFileListAsync(string session, object userState) {
            if ((this.onBeginGetMainUpdateFileListDelegate == null)) {
                this.onBeginGetMainUpdateFileListDelegate = new BeginOperationDelegate(this.OnBeginGetMainUpdateFileList);
            }
            if ((this.onEndGetMainUpdateFileListDelegate == null)) {
                this.onEndGetMainUpdateFileListDelegate = new EndOperationDelegate(this.OnEndGetMainUpdateFileList);
            }
            if ((this.onGetMainUpdateFileListCompletedDelegate == null)) {
                this.onGetMainUpdateFileListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMainUpdateFileListCompleted);
            }
            base.InvokeAsync(this.onBeginGetMainUpdateFileListDelegate, new object[] {
                        session}, this.onEndGetMainUpdateFileListDelegate, this.onGetMainUpdateFileListCompletedDelegate, userState);
        }
        
        public VPMobileObjects.UpdateFileInfo[] GetSplashUpdateFileList(string session) {
            return base.Channel.GetSplashUpdateFileList(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSplashUpdateFileList(string session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSplashUpdateFileList(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileObjects.UpdateFileInfo[] EndGetSplashUpdateFileList(System.IAsyncResult result) {
            return base.Channel.EndGetSplashUpdateFileList(result);
        }
        
        private System.IAsyncResult OnBeginGetSplashUpdateFileList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            return this.BeginGetSplashUpdateFileList(session, callback, asyncState);
        }
        
        private object[] OnEndGetSplashUpdateFileList(System.IAsyncResult result) {
            VPMobileObjects.UpdateFileInfo[] retVal = this.EndGetSplashUpdateFileList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSplashUpdateFileListCompleted(object state) {
            if ((this.GetSplashUpdateFileListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSplashUpdateFileListCompleted(this, new GetSplashUpdateFileListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSplashUpdateFileListAsync(string session) {
            this.GetSplashUpdateFileListAsync(session, null);
        }
        
        public void GetSplashUpdateFileListAsync(string session, object userState) {
            if ((this.onBeginGetSplashUpdateFileListDelegate == null)) {
                this.onBeginGetSplashUpdateFileListDelegate = new BeginOperationDelegate(this.OnBeginGetSplashUpdateFileList);
            }
            if ((this.onEndGetSplashUpdateFileListDelegate == null)) {
                this.onEndGetSplashUpdateFileListDelegate = new EndOperationDelegate(this.OnEndGetSplashUpdateFileList);
            }
            if ((this.onGetSplashUpdateFileListCompletedDelegate == null)) {
                this.onGetSplashUpdateFileListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSplashUpdateFileListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSplashUpdateFileListDelegate, new object[] {
                        session}, this.onEndGetSplashUpdateFileListDelegate, this.onGetSplashUpdateFileListCompletedDelegate, userState);
        }
        
        public byte[] GetMainUpdateFile(string session, string relativePath) {
            return base.Channel.GetMainUpdateFile(session, relativePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMainUpdateFile(string session, string relativePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMainUpdateFile(session, relativePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetMainUpdateFile(System.IAsyncResult result) {
            return base.Channel.EndGetMainUpdateFile(result);
        }
        
        private System.IAsyncResult OnBeginGetMainUpdateFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            string relativePath = ((string)(inValues[1]));
            return this.BeginGetMainUpdateFile(session, relativePath, callback, asyncState);
        }
        
        private object[] OnEndGetMainUpdateFile(System.IAsyncResult result) {
            byte[] retVal = this.EndGetMainUpdateFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMainUpdateFileCompleted(object state) {
            if ((this.GetMainUpdateFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMainUpdateFileCompleted(this, new GetMainUpdateFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMainUpdateFileAsync(string session, string relativePath) {
            this.GetMainUpdateFileAsync(session, relativePath, null);
        }
        
        public void GetMainUpdateFileAsync(string session, string relativePath, object userState) {
            if ((this.onBeginGetMainUpdateFileDelegate == null)) {
                this.onBeginGetMainUpdateFileDelegate = new BeginOperationDelegate(this.OnBeginGetMainUpdateFile);
            }
            if ((this.onEndGetMainUpdateFileDelegate == null)) {
                this.onEndGetMainUpdateFileDelegate = new EndOperationDelegate(this.OnEndGetMainUpdateFile);
            }
            if ((this.onGetMainUpdateFileCompletedDelegate == null)) {
                this.onGetMainUpdateFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMainUpdateFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetMainUpdateFileDelegate, new object[] {
                        session,
                        relativePath}, this.onEndGetMainUpdateFileDelegate, this.onGetMainUpdateFileCompletedDelegate, userState);
        }
        
        public byte[] GetSplashUpdateFile(string session, string relativePath) {
            return base.Channel.GetSplashUpdateFile(session, relativePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSplashUpdateFile(string session, string relativePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSplashUpdateFile(session, relativePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetSplashUpdateFile(System.IAsyncResult result) {
            return base.Channel.EndGetSplashUpdateFile(result);
        }
        
        private System.IAsyncResult OnBeginGetSplashUpdateFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string session = ((string)(inValues[0]));
            string relativePath = ((string)(inValues[1]));
            return this.BeginGetSplashUpdateFile(session, relativePath, callback, asyncState);
        }
        
        private object[] OnEndGetSplashUpdateFile(System.IAsyncResult result) {
            byte[] retVal = this.EndGetSplashUpdateFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSplashUpdateFileCompleted(object state) {
            if ((this.GetSplashUpdateFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSplashUpdateFileCompleted(this, new GetSplashUpdateFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSplashUpdateFileAsync(string session, string relativePath) {
            this.GetSplashUpdateFileAsync(session, relativePath, null);
        }
        
        public void GetSplashUpdateFileAsync(string session, string relativePath, object userState) {
            if ((this.onBeginGetSplashUpdateFileDelegate == null)) {
                this.onBeginGetSplashUpdateFileDelegate = new BeginOperationDelegate(this.OnBeginGetSplashUpdateFile);
            }
            if ((this.onEndGetSplashUpdateFileDelegate == null)) {
                this.onEndGetSplashUpdateFileDelegate = new EndOperationDelegate(this.OnEndGetSplashUpdateFile);
            }
            if ((this.onGetSplashUpdateFileCompletedDelegate == null)) {
                this.onGetSplashUpdateFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSplashUpdateFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetSplashUpdateFileDelegate, new object[] {
                        session,
                        relativePath}, this.onEndGetSplashUpdateFileDelegate, this.onGetSplashUpdateFileCompletedDelegate, userState);
        }
    }
}
