//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VPMobileAdmin.VPService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VPMobileAVLSettings", Namespace="http://schemas.datacontract.org/2004/07/VPCoreService")]
    [System.SerializableAttribute()]
    public partial class VPMobileAVLSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid AVLIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ConfigIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfigNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileAdmin.VPService.VPAVLGroupInfo[] GroupsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid AVLID {
            get {
                return this.AVLIDField;
            }
            set {
                if ((this.AVLIDField.Equals(value) != true)) {
                    this.AVLIDField = value;
                    this.RaisePropertyChanged("AVLID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ConfigID {
            get {
                return this.ConfigIDField;
            }
            set {
                if ((this.ConfigIDField.Equals(value) != true)) {
                    this.ConfigIDField = value;
                    this.RaisePropertyChanged("ConfigID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfigName {
            get {
                return this.ConfigNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigNameField, value) != true)) {
                    this.ConfigNameField = value;
                    this.RaisePropertyChanged("ConfigName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileAdmin.VPService.VPAVLGroupInfo[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VPAVLGroupInfo", Namespace="http://schemas.datacontract.org/2004/07/VPCoreService")]
    [System.SerializableAttribute()]
    public partial class VPAVLGroupInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupSymbolField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupColor {
            get {
                return this.GroupColorField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupColorField, value) != true)) {
                    this.GroupColorField = value;
                    this.RaisePropertyChanged("GroupColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupSymbol {
            get {
                return this.GroupSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupSymbolField, value) != true)) {
                    this.GroupSymbolField = value;
                    this.RaisePropertyChanged("GroupSymbol");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VPMobileDispatchSettings", Namespace="http://schemas.datacontract.org/2004/07/VPCoreService")]
    [System.SerializableAttribute()]
    public partial class VPMobileDispatchSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ConfigIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfigNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultE911CallSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultIncidentSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DispatchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid E911SourceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentSourceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileAdmin.VPService.VPDispatchIncidentTypeSettings[] IncidentTypesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ConfigID {
            get {
                return this.ConfigIDField;
            }
            set {
                if ((this.ConfigIDField.Equals(value) != true)) {
                    this.ConfigIDField = value;
                    this.RaisePropertyChanged("ConfigID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfigName {
            get {
                return this.ConfigNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigNameField, value) != true)) {
                    this.ConfigNameField = value;
                    this.RaisePropertyChanged("ConfigName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultE911CallSymbol {
            get {
                return this.DefaultE911CallSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultE911CallSymbolField, value) != true)) {
                    this.DefaultE911CallSymbolField = value;
                    this.RaisePropertyChanged("DefaultE911CallSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultIncidentSymbol {
            get {
                return this.DefaultIncidentSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultIncidentSymbolField, value) != true)) {
                    this.DefaultIncidentSymbolField = value;
                    this.RaisePropertyChanged("DefaultIncidentSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DispatchID {
            get {
                return this.DispatchIDField;
            }
            set {
                if ((this.DispatchIDField.Equals(value) != true)) {
                    this.DispatchIDField = value;
                    this.RaisePropertyChanged("DispatchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid E911SourceID {
            get {
                return this.E911SourceIDField;
            }
            set {
                if ((this.E911SourceIDField.Equals(value) != true)) {
                    this.E911SourceIDField = value;
                    this.RaisePropertyChanged("E911SourceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentSourceID {
            get {
                return this.IncidentSourceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentSourceIDField, value) != true)) {
                    this.IncidentSourceIDField = value;
                    this.RaisePropertyChanged("IncidentSourceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileAdmin.VPService.VPDispatchIncidentTypeSettings[] IncidentTypes {
            get {
                return this.IncidentTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTypesField, value) != true)) {
                    this.IncidentTypesField = value;
                    this.RaisePropertyChanged("IncidentTypes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VPDispatchIncidentTypeSettings", Namespace="http://schemas.datacontract.org/2004/07/VPCoreService")]
    [System.SerializableAttribute()]
    public partial class VPDispatchIncidentTypeSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentType {
            get {
                return this.IncidentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTypeField, value) != true)) {
                    this.IncidentTypeField = value;
                    this.RaisePropertyChanged("IncidentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Symbol {
            get {
                return this.SymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolField, value) != true)) {
                    this.SymbolField = value;
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VPService.IVPMService")]
    public interface IVPMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMService/GetAvailableAvlSettings", ReplyAction="http://tempuri.org/IVPMService/GetAvailableAvlSettingsResponse")]
        VPMobileAdmin.VPService.VPMobileAVLSettings[] GetAvailableAvlSettings();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMService/GetAvailableAvlSettings", ReplyAction="http://tempuri.org/IVPMService/GetAvailableAvlSettingsResponse")]
        System.IAsyncResult BeginGetAvailableAvlSettings(System.AsyncCallback callback, object asyncState);
        
        VPMobileAdmin.VPService.VPMobileAVLSettings[] EndGetAvailableAvlSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMService/GetAvlSettings", ReplyAction="http://tempuri.org/IVPMService/GetAvlSettingsResponse")]
        VPMobileAdmin.VPService.VPMobileAVLSettings GetAvlSettings(System.Guid avlId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMService/GetAvlSettings", ReplyAction="http://tempuri.org/IVPMService/GetAvlSettingsResponse")]
        System.IAsyncResult BeginGetAvlSettings(System.Guid avlId, System.AsyncCallback callback, object asyncState);
        
        VPMobileAdmin.VPService.VPMobileAVLSettings EndGetAvlSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMService/GetAvailableDispatchSettings", ReplyAction="http://tempuri.org/IVPMService/GetAvailableDispatchSettingsResponse")]
        VPMobileAdmin.VPService.VPMobileDispatchSettings[] GetAvailableDispatchSettings();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMService/GetAvailableDispatchSettings", ReplyAction="http://tempuri.org/IVPMService/GetAvailableDispatchSettingsResponse")]
        System.IAsyncResult BeginGetAvailableDispatchSettings(System.AsyncCallback callback, object asyncState);
        
        VPMobileAdmin.VPService.VPMobileDispatchSettings[] EndGetAvailableDispatchSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMService/GetDispatchSettings", ReplyAction="http://tempuri.org/IVPMService/GetDispatchSettingsResponse")]
        VPMobileAdmin.VPService.VPMobileDispatchSettings GetDispatchSettings(System.Guid dispatchId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMService/GetDispatchSettings", ReplyAction="http://tempuri.org/IVPMService/GetDispatchSettingsResponse")]
        System.IAsyncResult BeginGetDispatchSettings(System.Guid dispatchId, System.AsyncCallback callback, object asyncState);
        
        VPMobileAdmin.VPService.VPMobileDispatchSettings EndGetDispatchSettings(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVPMServiceChannel : VPMobileAdmin.VPService.IVPMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableAvlSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableAvlSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileAdmin.VPService.VPMobileAVLSettings[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileAdmin.VPService.VPMobileAVLSettings[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvlSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvlSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileAdmin.VPService.VPMobileAVLSettings Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileAdmin.VPService.VPMobileAVLSettings)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableDispatchSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableDispatchSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileAdmin.VPService.VPMobileDispatchSettings[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileAdmin.VPService.VPMobileDispatchSettings[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDispatchSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDispatchSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileAdmin.VPService.VPMobileDispatchSettings Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileAdmin.VPService.VPMobileDispatchSettings)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VPMServiceClient : System.ServiceModel.ClientBase<VPMobileAdmin.VPService.IVPMService>, VPMobileAdmin.VPService.IVPMService {
        
        private BeginOperationDelegate onBeginGetAvailableAvlSettingsDelegate;
        
        private EndOperationDelegate onEndGetAvailableAvlSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableAvlSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAvlSettingsDelegate;
        
        private EndOperationDelegate onEndGetAvlSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvlSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAvailableDispatchSettingsDelegate;
        
        private EndOperationDelegate onEndGetAvailableDispatchSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableDispatchSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDispatchSettingsDelegate;
        
        private EndOperationDelegate onEndGetDispatchSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDispatchSettingsCompletedDelegate;
        
        public VPMServiceClient() {
        }
        
        public VPMServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VPMServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VPMServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VPMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetAvailableAvlSettingsCompletedEventArgs> GetAvailableAvlSettingsCompleted;
        
        public event System.EventHandler<GetAvlSettingsCompletedEventArgs> GetAvlSettingsCompleted;
        
        public event System.EventHandler<GetAvailableDispatchSettingsCompletedEventArgs> GetAvailableDispatchSettingsCompleted;
        
        public event System.EventHandler<GetDispatchSettingsCompletedEventArgs> GetDispatchSettingsCompleted;
        
        public VPMobileAdmin.VPService.VPMobileAVLSettings[] GetAvailableAvlSettings() {
            return base.Channel.GetAvailableAvlSettings();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAvailableAvlSettings(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableAvlSettings(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileAdmin.VPService.VPMobileAVLSettings[] EndGetAvailableAvlSettings(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableAvlSettings(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableAvlSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAvailableAvlSettings(callback, asyncState);
        }
        
        private object[] OnEndGetAvailableAvlSettings(System.IAsyncResult result) {
            VPMobileAdmin.VPService.VPMobileAVLSettings[] retVal = this.EndGetAvailableAvlSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableAvlSettingsCompleted(object state) {
            if ((this.GetAvailableAvlSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableAvlSettingsCompleted(this, new GetAvailableAvlSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableAvlSettingsAsync() {
            this.GetAvailableAvlSettingsAsync(null);
        }
        
        public void GetAvailableAvlSettingsAsync(object userState) {
            if ((this.onBeginGetAvailableAvlSettingsDelegate == null)) {
                this.onBeginGetAvailableAvlSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableAvlSettings);
            }
            if ((this.onEndGetAvailableAvlSettingsDelegate == null)) {
                this.onEndGetAvailableAvlSettingsDelegate = new EndOperationDelegate(this.OnEndGetAvailableAvlSettings);
            }
            if ((this.onGetAvailableAvlSettingsCompletedDelegate == null)) {
                this.onGetAvailableAvlSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableAvlSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableAvlSettingsDelegate, null, this.onEndGetAvailableAvlSettingsDelegate, this.onGetAvailableAvlSettingsCompletedDelegate, userState);
        }
        
        public VPMobileAdmin.VPService.VPMobileAVLSettings GetAvlSettings(System.Guid avlId) {
            return base.Channel.GetAvlSettings(avlId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAvlSettings(System.Guid avlId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvlSettings(avlId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileAdmin.VPService.VPMobileAVLSettings EndGetAvlSettings(System.IAsyncResult result) {
            return base.Channel.EndGetAvlSettings(result);
        }
        
        private System.IAsyncResult OnBeginGetAvlSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid avlId = ((System.Guid)(inValues[0]));
            return this.BeginGetAvlSettings(avlId, callback, asyncState);
        }
        
        private object[] OnEndGetAvlSettings(System.IAsyncResult result) {
            VPMobileAdmin.VPService.VPMobileAVLSettings retVal = this.EndGetAvlSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvlSettingsCompleted(object state) {
            if ((this.GetAvlSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvlSettingsCompleted(this, new GetAvlSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvlSettingsAsync(System.Guid avlId) {
            this.GetAvlSettingsAsync(avlId, null);
        }
        
        public void GetAvlSettingsAsync(System.Guid avlId, object userState) {
            if ((this.onBeginGetAvlSettingsDelegate == null)) {
                this.onBeginGetAvlSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetAvlSettings);
            }
            if ((this.onEndGetAvlSettingsDelegate == null)) {
                this.onEndGetAvlSettingsDelegate = new EndOperationDelegate(this.OnEndGetAvlSettings);
            }
            if ((this.onGetAvlSettingsCompletedDelegate == null)) {
                this.onGetAvlSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvlSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvlSettingsDelegate, new object[] {
                        avlId}, this.onEndGetAvlSettingsDelegate, this.onGetAvlSettingsCompletedDelegate, userState);
        }
        
        public VPMobileAdmin.VPService.VPMobileDispatchSettings[] GetAvailableDispatchSettings() {
            return base.Channel.GetAvailableDispatchSettings();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAvailableDispatchSettings(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableDispatchSettings(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileAdmin.VPService.VPMobileDispatchSettings[] EndGetAvailableDispatchSettings(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableDispatchSettings(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableDispatchSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAvailableDispatchSettings(callback, asyncState);
        }
        
        private object[] OnEndGetAvailableDispatchSettings(System.IAsyncResult result) {
            VPMobileAdmin.VPService.VPMobileDispatchSettings[] retVal = this.EndGetAvailableDispatchSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableDispatchSettingsCompleted(object state) {
            if ((this.GetAvailableDispatchSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableDispatchSettingsCompleted(this, new GetAvailableDispatchSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableDispatchSettingsAsync() {
            this.GetAvailableDispatchSettingsAsync(null);
        }
        
        public void GetAvailableDispatchSettingsAsync(object userState) {
            if ((this.onBeginGetAvailableDispatchSettingsDelegate == null)) {
                this.onBeginGetAvailableDispatchSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableDispatchSettings);
            }
            if ((this.onEndGetAvailableDispatchSettingsDelegate == null)) {
                this.onEndGetAvailableDispatchSettingsDelegate = new EndOperationDelegate(this.OnEndGetAvailableDispatchSettings);
            }
            if ((this.onGetAvailableDispatchSettingsCompletedDelegate == null)) {
                this.onGetAvailableDispatchSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableDispatchSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableDispatchSettingsDelegate, null, this.onEndGetAvailableDispatchSettingsDelegate, this.onGetAvailableDispatchSettingsCompletedDelegate, userState);
        }
        
        public VPMobileAdmin.VPService.VPMobileDispatchSettings GetDispatchSettings(System.Guid dispatchId) {
            return base.Channel.GetDispatchSettings(dispatchId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDispatchSettings(System.Guid dispatchId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDispatchSettings(dispatchId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileAdmin.VPService.VPMobileDispatchSettings EndGetDispatchSettings(System.IAsyncResult result) {
            return base.Channel.EndGetDispatchSettings(result);
        }
        
        private System.IAsyncResult OnBeginGetDispatchSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid dispatchId = ((System.Guid)(inValues[0]));
            return this.BeginGetDispatchSettings(dispatchId, callback, asyncState);
        }
        
        private object[] OnEndGetDispatchSettings(System.IAsyncResult result) {
            VPMobileAdmin.VPService.VPMobileDispatchSettings retVal = this.EndGetDispatchSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDispatchSettingsCompleted(object state) {
            if ((this.GetDispatchSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDispatchSettingsCompleted(this, new GetDispatchSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDispatchSettingsAsync(System.Guid dispatchId) {
            this.GetDispatchSettingsAsync(dispatchId, null);
        }
        
        public void GetDispatchSettingsAsync(System.Guid dispatchId, object userState) {
            if ((this.onBeginGetDispatchSettingsDelegate == null)) {
                this.onBeginGetDispatchSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetDispatchSettings);
            }
            if ((this.onEndGetDispatchSettingsDelegate == null)) {
                this.onEndGetDispatchSettingsDelegate = new EndOperationDelegate(this.OnEndGetDispatchSettings);
            }
            if ((this.onGetDispatchSettingsCompletedDelegate == null)) {
                this.onGetDispatchSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDispatchSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDispatchSettingsDelegate, new object[] {
                        dispatchId}, this.onEndGetDispatchSettingsDelegate, this.onGetDispatchSettingsCompletedDelegate, userState);
        }
    }
}
