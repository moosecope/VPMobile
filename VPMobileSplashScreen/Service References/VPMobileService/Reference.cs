//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VPMobileSplashScreen.VPMobileService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VPMobileSettings", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class VPMobileSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid AvlConfigIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AvlEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] AvlGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid AvlIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AvlListVisibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AvlLocOptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvlServerAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DispatchConfigIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DispatchGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DispatchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstIncidentDisplayFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.Envelope FullExtentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.GeocoderSettings[] GeocodersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LegendEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MapIconLargeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.CacheSettings[] MapServicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MapTextLargeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReportUnitNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.RoutingSettings RoutingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondIncidentDisplayFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.StreetFinderSettings[] StreetListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid AvlConfigID {
            get {
                return this.AvlConfigIDField;
            }
            set {
                if ((this.AvlConfigIDField.Equals(value) != true)) {
                    this.AvlConfigIDField = value;
                    this.RaisePropertyChanged("AvlConfigID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AvlEnabled {
            get {
                return this.AvlEnabledField;
            }
            set {
                if ((this.AvlEnabledField.Equals(value) != true)) {
                    this.AvlEnabledField = value;
                    this.RaisePropertyChanged("AvlEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] AvlGroups {
            get {
                return this.AvlGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.AvlGroupsField, value) != true)) {
                    this.AvlGroupsField = value;
                    this.RaisePropertyChanged("AvlGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid AvlID {
            get {
                return this.AvlIDField;
            }
            set {
                if ((this.AvlIDField.Equals(value) != true)) {
                    this.AvlIDField = value;
                    this.RaisePropertyChanged("AvlID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AvlListVisible {
            get {
                return this.AvlListVisibleField;
            }
            set {
                if ((this.AvlListVisibleField.Equals(value) != true)) {
                    this.AvlListVisibleField = value;
                    this.RaisePropertyChanged("AvlListVisible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AvlLocOption {
            get {
                return this.AvlLocOptionField;
            }
            set {
                if ((this.AvlLocOptionField.Equals(value) != true)) {
                    this.AvlLocOptionField = value;
                    this.RaisePropertyChanged("AvlLocOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvlServerAddress {
            get {
                return this.AvlServerAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AvlServerAddressField, value) != true)) {
                    this.AvlServerAddressField = value;
                    this.RaisePropertyChanged("AvlServerAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DispatchConfigID {
            get {
                return this.DispatchConfigIDField;
            }
            set {
                if ((this.DispatchConfigIDField.Equals(value) != true)) {
                    this.DispatchConfigIDField = value;
                    this.RaisePropertyChanged("DispatchConfigID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DispatchGroups {
            get {
                return this.DispatchGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.DispatchGroupsField, value) != true)) {
                    this.DispatchGroupsField = value;
                    this.RaisePropertyChanged("DispatchGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DispatchID {
            get {
                return this.DispatchIDField;
            }
            set {
                if ((this.DispatchIDField.Equals(value) != true)) {
                    this.DispatchIDField = value;
                    this.RaisePropertyChanged("DispatchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstIncidentDisplayField {
            get {
                return this.FirstIncidentDisplayFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstIncidentDisplayFieldField, value) != true)) {
                    this.FirstIncidentDisplayFieldField = value;
                    this.RaisePropertyChanged("FirstIncidentDisplayField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.Envelope FullExtent {
            get {
                return this.FullExtentField;
            }
            set {
                if ((object.ReferenceEquals(this.FullExtentField, value) != true)) {
                    this.FullExtentField = value;
                    this.RaisePropertyChanged("FullExtent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.GeocoderSettings[] Geocoders {
            get {
                return this.GeocodersField;
            }
            set {
                if ((object.ReferenceEquals(this.GeocodersField, value) != true)) {
                    this.GeocodersField = value;
                    this.RaisePropertyChanged("Geocoders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LegendEnabled {
            get {
                return this.LegendEnabledField;
            }
            set {
                if ((this.LegendEnabledField.Equals(value) != true)) {
                    this.LegendEnabledField = value;
                    this.RaisePropertyChanged("LegendEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MapIconLarge {
            get {
                return this.MapIconLargeField;
            }
            set {
                if ((this.MapIconLargeField.Equals(value) != true)) {
                    this.MapIconLargeField = value;
                    this.RaisePropertyChanged("MapIconLarge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.CacheSettings[] MapServices {
            get {
                return this.MapServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.MapServicesField, value) != true)) {
                    this.MapServicesField = value;
                    this.RaisePropertyChanged("MapServices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MapTextLarge {
            get {
                return this.MapTextLargeField;
            }
            set {
                if ((this.MapTextLargeField.Equals(value) != true)) {
                    this.MapTextLargeField = value;
                    this.RaisePropertyChanged("MapTextLarge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReportUnitNumber {
            get {
                return this.ReportUnitNumberField;
            }
            set {
                if ((this.ReportUnitNumberField.Equals(value) != true)) {
                    this.ReportUnitNumberField = value;
                    this.RaisePropertyChanged("ReportUnitNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.RoutingSettings Routing {
            get {
                return this.RoutingField;
            }
            set {
                if ((object.ReferenceEquals(this.RoutingField, value) != true)) {
                    this.RoutingField = value;
                    this.RaisePropertyChanged("Routing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondIncidentDisplayField {
            get {
                return this.SecondIncidentDisplayFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondIncidentDisplayFieldField, value) != true)) {
                    this.SecondIncidentDisplayFieldField = value;
                    this.RaisePropertyChanged("SecondIncidentDisplayField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.StreetFinderSettings[] StreetList {
            get {
                return this.StreetListField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetListField, value) != true)) {
                    this.StreetListField = value;
                    this.RaisePropertyChanged("StreetList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Envelope", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class Envelope : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxScaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinScaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WKIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YMinField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxScale {
            get {
                return this.MaxScaleField;
            }
            set {
                if ((this.MaxScaleField.Equals(value) != true)) {
                    this.MaxScaleField = value;
                    this.RaisePropertyChanged("MaxScale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinScale {
            get {
                return this.MinScaleField;
            }
            set {
                if ((this.MinScaleField.Equals(value) != true)) {
                    this.MinScaleField = value;
                    this.RaisePropertyChanged("MinScale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WKID {
            get {
                return this.WKIDField;
            }
            set {
                if ((this.WKIDField.Equals(value) != true)) {
                    this.WKIDField = value;
                    this.RaisePropertyChanged("WKID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double XMax {
            get {
                return this.XMaxField;
            }
            set {
                if ((this.XMaxField.Equals(value) != true)) {
                    this.XMaxField = value;
                    this.RaisePropertyChanged("XMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double XMin {
            get {
                return this.XMinField;
            }
            set {
                if ((this.XMinField.Equals(value) != true)) {
                    this.XMinField = value;
                    this.RaisePropertyChanged("XMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YMax {
            get {
                return this.YMaxField;
            }
            set {
                if ((this.YMaxField.Equals(value) != true)) {
                    this.YMaxField = value;
                    this.RaisePropertyChanged("YMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YMin {
            get {
                return this.YMinField;
            }
            set {
                if ((this.YMinField.Equals(value) != true)) {
                    this.YMinField = value;
                    this.RaisePropertyChanged("YMin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoutingSettings", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class RoutingSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OneWayFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OneWayFieldIndicatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShapeFilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpeedLimitFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetNameFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OneWayField {
            get {
                return this.OneWayFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.OneWayFieldField, value) != true)) {
                    this.OneWayFieldField = value;
                    this.RaisePropertyChanged("OneWayField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OneWayFieldIndicator {
            get {
                return this.OneWayFieldIndicatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OneWayFieldIndicatorField, value) != true)) {
                    this.OneWayFieldIndicatorField = value;
                    this.RaisePropertyChanged("OneWayFieldIndicator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShapeFilePath {
            get {
                return this.ShapeFilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ShapeFilePathField, value) != true)) {
                    this.ShapeFilePathField = value;
                    this.RaisePropertyChanged("ShapeFilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpeedLimitField {
            get {
                return this.SpeedLimitFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.SpeedLimitFieldField, value) != true)) {
                    this.SpeedLimitFieldField = value;
                    this.RaisePropertyChanged("SpeedLimitField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetNameField {
            get {
                return this.StreetNameFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetNameFieldField, value) != true)) {
                    this.StreetNameFieldField = value;
                    this.RaisePropertyChanged("StreetNameField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeocoderSettings", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class GeocoderSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AptNumberFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CacheNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HouseNumberFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LeftFromFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LeftToFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinMatchScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreDirFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RightFromFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RightToFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetNameFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetTypeFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SufDirFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.GeocoderTypes TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AptNumberField {
            get {
                return this.AptNumberFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.AptNumberFieldField, value) != true)) {
                    this.AptNumberFieldField = value;
                    this.RaisePropertyChanged("AptNumberField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CacheName {
            get {
                return this.CacheNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CacheNameField, value) != true)) {
                    this.CacheNameField = value;
                    this.RaisePropertyChanged("CacheName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HouseNumberField {
            get {
                return this.HouseNumberFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.HouseNumberFieldField, value) != true)) {
                    this.HouseNumberFieldField = value;
                    this.RaisePropertyChanged("HouseNumberField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayerName {
            get {
                return this.LayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LayerNameField, value) != true)) {
                    this.LayerNameField = value;
                    this.RaisePropertyChanged("LayerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LeftFromField {
            get {
                return this.LeftFromFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.LeftFromFieldField, value) != true)) {
                    this.LeftFromFieldField = value;
                    this.RaisePropertyChanged("LeftFromField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LeftToField {
            get {
                return this.LeftToFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.LeftToFieldField, value) != true)) {
                    this.LeftToFieldField = value;
                    this.RaisePropertyChanged("LeftToField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinMatchScore {
            get {
                return this.MinMatchScoreField;
            }
            set {
                if ((this.MinMatchScoreField.Equals(value) != true)) {
                    this.MinMatchScoreField = value;
                    this.RaisePropertyChanged("MinMatchScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreDirField {
            get {
                return this.PreDirFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.PreDirFieldField, value) != true)) {
                    this.PreDirFieldField = value;
                    this.RaisePropertyChanged("PreDirField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RightFromField {
            get {
                return this.RightFromFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.RightFromFieldField, value) != true)) {
                    this.RightFromFieldField = value;
                    this.RaisePropertyChanged("RightFromField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RightToField {
            get {
                return this.RightToFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.RightToFieldField, value) != true)) {
                    this.RightToFieldField = value;
                    this.RaisePropertyChanged("RightToField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetNameField {
            get {
                return this.StreetNameFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetNameFieldField, value) != true)) {
                    this.StreetNameFieldField = value;
                    this.RaisePropertyChanged("StreetNameField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetTypeField {
            get {
                return this.StreetTypeFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetTypeFieldField, value) != true)) {
                    this.StreetTypeFieldField = value;
                    this.RaisePropertyChanged("StreetTypeField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SufDirField {
            get {
                return this.SufDirFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.SufDirFieldField, value) != true)) {
                    this.SufDirFieldField = value;
                    this.RaisePropertyChanged("SufDirField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.GeocoderTypes Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneField {
            get {
                return this.ZoneFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneFieldField, value) != true)) {
                    this.ZoneFieldField = value;
                    this.RaisePropertyChanged("ZoneField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CacheSettings", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class CacheSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] IdentifyingLayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBaseMapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVisibleDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PurgeOnSyncField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.Envelope SyncEnvelopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VPMobileSplashScreen.VPMobileService.CacheSyncTypes SyncTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string URLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XMLIdentifyingLayersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] IdentifyingLayers {
            get {
                return this.IdentifyingLayersField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifyingLayersField, value) != true)) {
                    this.IdentifyingLayersField = value;
                    this.RaisePropertyChanged("IdentifyingLayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBaseMap {
            get {
                return this.IsBaseMapField;
            }
            set {
                if ((this.IsBaseMapField.Equals(value) != true)) {
                    this.IsBaseMapField = value;
                    this.RaisePropertyChanged("IsBaseMap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVisibleDefault {
            get {
                return this.IsVisibleDefaultField;
            }
            set {
                if ((this.IsVisibleDefaultField.Equals(value) != true)) {
                    this.IsVisibleDefaultField = value;
                    this.RaisePropertyChanged("IsVisibleDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((this.LastUpdateField.Equals(value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PurgeOnSync {
            get {
                return this.PurgeOnSyncField;
            }
            set {
                if ((this.PurgeOnSyncField.Equals(value) != true)) {
                    this.PurgeOnSyncField = value;
                    this.RaisePropertyChanged("PurgeOnSync");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.Envelope SyncEnvelope {
            get {
                return this.SyncEnvelopeField;
            }
            set {
                if ((object.ReferenceEquals(this.SyncEnvelopeField, value) != true)) {
                    this.SyncEnvelopeField = value;
                    this.RaisePropertyChanged("SyncEnvelope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VPMobileSplashScreen.VPMobileService.CacheSyncTypes SyncType {
            get {
                return this.SyncTypeField;
            }
            set {
                if ((this.SyncTypeField.Equals(value) != true)) {
                    this.SyncTypeField = value;
                    this.RaisePropertyChanged("SyncType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XMLIdentifyingLayers {
            get {
                return this.XMLIdentifyingLayersField;
            }
            set {
                if ((object.ReferenceEquals(this.XMLIdentifyingLayersField, value) != true)) {
                    this.XMLIdentifyingLayersField = value;
                    this.RaisePropertyChanged("XMLIdentifyingLayers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StreetFinderSettings", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class StreetFinderSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CacheNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetNameFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CacheName {
            get {
                return this.CacheNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CacheNameField, value) != true)) {
                    this.CacheNameField = value;
                    this.RaisePropertyChanged("CacheName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayerName {
            get {
                return this.LayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LayerNameField, value) != true)) {
                    this.LayerNameField = value;
                    this.RaisePropertyChanged("LayerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetNameField {
            get {
                return this.StreetNameFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetNameFieldField, value) != true)) {
                    this.StreetNameFieldField = value;
                    this.RaisePropertyChanged("StreetNameField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeocoderTypes", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    public enum GeocoderTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SingleField = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SingleHouse = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SingleRange = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DualRange = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CacheSyncTypes", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    public enum CacheSyncTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlwaysSync = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AdminSync = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NeverSync = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoutingFileInfo", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class RoutingFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] FieldsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoutingFileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Fields {
            get {
                return this.FieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldsField, value) != true)) {
                    this.FieldsField = value;
                    this.RaisePropertyChanged("Fields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoutingFileName {
            get {
                return this.RoutingFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoutingFileNameField, value) != true)) {
                    this.RoutingFileNameField = value;
                    this.RaisePropertyChanged("RoutingFileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateFileInfo", Namespace="http://schemas.datacontract.org/2004/07/VPMobileObjects")]
    [System.SerializableAttribute()]
    public partial class UpdateFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FileDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelativeFilePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FileDate {
            get {
                return this.FileDateField;
            }
            set {
                if ((this.FileDateField.Equals(value) != true)) {
                    this.FileDateField = value;
                    this.RaisePropertyChanged("FileDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelativeFilePath {
            get {
                return this.RelativeFilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.RelativeFilePathField, value) != true)) {
                    this.RelativeFilePathField = value;
                    this.RaisePropertyChanged("RelativeFilePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VPMobileService.IVPMobileService")]
    public interface IVPMobileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetConfig", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigResponse")]
        VPMobileSplashScreen.VPMobileService.VPMobileSettings GetConfig(string configName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetConfig", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigResponse")]
        System.IAsyncResult BeginGetConfig(string configName, System.AsyncCallback callback, object asyncState);
        
        VPMobileSplashScreen.VPMobileService.VPMobileSettings EndGetConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetConfigs", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigsResponse")]
        System.Tuple<string, string>[] GetConfigs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetConfigs", ReplyAction="http://tempuri.org/IVPMobileService/GetConfigsResponse")]
        System.IAsyncResult BeginGetConfigs(System.AsyncCallback callback, object asyncState);
        
        System.Tuple<string, string>[] EndGetConfigs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/UpdateConfig", ReplyAction="http://tempuri.org/IVPMobileService/UpdateConfigResponse")]
        bool UpdateConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/UpdateConfig", ReplyAction="http://tempuri.org/IVPMobileService/UpdateConfigResponse")]
        System.IAsyncResult BeginUpdateConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/AddConfig", ReplyAction="http://tempuri.org/IVPMobileService/AddConfigResponse")]
        bool AddConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/AddConfig", ReplyAction="http://tempuri.org/IVPMobileService/AddConfigResponse")]
        System.IAsyncResult BeginAddConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config, System.AsyncCallback callback, object asyncState);
        
        bool EndAddConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfo", ReplyAction="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfoResponse")]
        VPMobileSplashScreen.VPMobileService.RoutingFileInfo[] GetAllRoutingFileInfo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfo", ReplyAction="http://tempuri.org/IVPMobileService/GetAllRoutingFileInfoResponse")]
        System.IAsyncResult BeginGetAllRoutingFileInfo(System.AsyncCallback callback, object asyncState);
        
        VPMobileSplashScreen.VPMobileService.RoutingFileInfo[] EndGetAllRoutingFileInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/DeleteConfig", ReplyAction="http://tempuri.org/IVPMobileService/DeleteConfigResponse")]
        bool DeleteConfig(string configName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/DeleteConfig", ReplyAction="http://tempuri.org/IVPMobileService/DeleteConfigResponse")]
        System.IAsyncResult BeginDeleteConfig(string configName, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetMainUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileListResponse")]
        VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] GetMainUpdateFileList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetMainUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileListResponse")]
        System.IAsyncResult BeginGetMainUpdateFileList(System.AsyncCallback callback, object asyncState);
        
        VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] EndGetMainUpdateFileList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileListResponse")]
        VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] GetSplashUpdateFileList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFileList", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileListResponse")]
        System.IAsyncResult BeginGetSplashUpdateFileList(System.AsyncCallback callback, object asyncState);
        
        VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] EndGetSplashUpdateFileList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetMainUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileResponse")]
        byte[] GetMainUpdateFile(string relativePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetMainUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetMainUpdateFileResponse")]
        System.IAsyncResult BeginGetMainUpdateFile(string relativePath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetMainUpdateFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileResponse")]
        byte[] GetSplashUpdateFile(string relativePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IVPMobileService/GetSplashUpdateFile", ReplyAction="http://tempuri.org/IVPMobileService/GetSplashUpdateFileResponse")]
        System.IAsyncResult BeginGetSplashUpdateFile(string relativePath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetSplashUpdateFile(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVPMobileServiceChannel : VPMobileSplashScreen.VPMobileService.IVPMobileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileSplashScreen.VPMobileService.VPMobileSettings Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileSplashScreen.VPMobileService.VPMobileSettings)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Tuple<string, string>[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Tuple<string, string>[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllRoutingFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllRoutingFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileSplashScreen.VPMobileService.RoutingFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileSplashScreen.VPMobileService.RoutingFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMainUpdateFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMainUpdateFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileSplashScreen.VPMobileService.UpdateFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSplashUpdateFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSplashUpdateFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VPMobileSplashScreen.VPMobileService.UpdateFileInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMainUpdateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMainUpdateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSplashUpdateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSplashUpdateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VPMobileServiceClient : System.ServiceModel.ClientBase<VPMobileSplashScreen.VPMobileService.IVPMobileService>, VPMobileSplashScreen.VPMobileService.IVPMobileService {
        
        private BeginOperationDelegate onBeginGetConfigDelegate;
        
        private EndOperationDelegate onEndGetConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConfigsDelegate;
        
        private EndOperationDelegate onEndGetConfigsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateConfigDelegate;
        
        private EndOperationDelegate onEndUpdateConfigDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddConfigDelegate;
        
        private EndOperationDelegate onEndAddConfigDelegate;
        
        private System.Threading.SendOrPostCallback onAddConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllRoutingFileInfoDelegate;
        
        private EndOperationDelegate onEndGetAllRoutingFileInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllRoutingFileInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteConfigDelegate;
        
        private EndOperationDelegate onEndDeleteConfigDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMainUpdateFileListDelegate;
        
        private EndOperationDelegate onEndGetMainUpdateFileListDelegate;
        
        private System.Threading.SendOrPostCallback onGetMainUpdateFileListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSplashUpdateFileListDelegate;
        
        private EndOperationDelegate onEndGetSplashUpdateFileListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSplashUpdateFileListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMainUpdateFileDelegate;
        
        private EndOperationDelegate onEndGetMainUpdateFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetMainUpdateFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSplashUpdateFileDelegate;
        
        private EndOperationDelegate onEndGetSplashUpdateFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetSplashUpdateFileCompletedDelegate;
        
        public VPMobileServiceClient() {
        }
        
        public VPMobileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VPMobileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VPMobileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VPMobileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetConfigCompletedEventArgs> GetConfigCompleted;
        
        public event System.EventHandler<GetConfigsCompletedEventArgs> GetConfigsCompleted;
        
        public event System.EventHandler<UpdateConfigCompletedEventArgs> UpdateConfigCompleted;
        
        public event System.EventHandler<AddConfigCompletedEventArgs> AddConfigCompleted;
        
        public event System.EventHandler<GetAllRoutingFileInfoCompletedEventArgs> GetAllRoutingFileInfoCompleted;
        
        public event System.EventHandler<DeleteConfigCompletedEventArgs> DeleteConfigCompleted;
        
        public event System.EventHandler<GetMainUpdateFileListCompletedEventArgs> GetMainUpdateFileListCompleted;
        
        public event System.EventHandler<GetSplashUpdateFileListCompletedEventArgs> GetSplashUpdateFileListCompleted;
        
        public event System.EventHandler<GetMainUpdateFileCompletedEventArgs> GetMainUpdateFileCompleted;
        
        public event System.EventHandler<GetSplashUpdateFileCompletedEventArgs> GetSplashUpdateFileCompleted;
        
        public VPMobileSplashScreen.VPMobileService.VPMobileSettings GetConfig(string configName) {
            return base.Channel.GetConfig(configName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfig(string configName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfig(configName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileSplashScreen.VPMobileService.VPMobileSettings EndGetConfig(System.IAsyncResult result) {
            return base.Channel.EndGetConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string configName = ((string)(inValues[0]));
            return this.BeginGetConfig(configName, callback, asyncState);
        }
        
        private object[] OnEndGetConfig(System.IAsyncResult result) {
            VPMobileSplashScreen.VPMobileService.VPMobileSettings retVal = this.EndGetConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigCompleted(object state) {
            if ((this.GetConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigCompleted(this, new GetConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigAsync(string configName) {
            this.GetConfigAsync(configName, null);
        }
        
        public void GetConfigAsync(string configName, object userState) {
            if ((this.onBeginGetConfigDelegate == null)) {
                this.onBeginGetConfigDelegate = new BeginOperationDelegate(this.OnBeginGetConfig);
            }
            if ((this.onEndGetConfigDelegate == null)) {
                this.onEndGetConfigDelegate = new EndOperationDelegate(this.OnEndGetConfig);
            }
            if ((this.onGetConfigCompletedDelegate == null)) {
                this.onGetConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigDelegate, new object[] {
                        configName}, this.onEndGetConfigDelegate, this.onGetConfigCompletedDelegate, userState);
        }
        
        public System.Tuple<string, string>[] GetConfigs() {
            return base.Channel.GetConfigs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfigs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfigs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Tuple<string, string>[] EndGetConfigs(System.IAsyncResult result) {
            return base.Channel.EndGetConfigs(result);
        }
        
        private System.IAsyncResult OnBeginGetConfigs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetConfigs(callback, asyncState);
        }
        
        private object[] OnEndGetConfigs(System.IAsyncResult result) {
            System.Tuple<string, string>[] retVal = this.EndGetConfigs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigsCompleted(object state) {
            if ((this.GetConfigsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigsCompleted(this, new GetConfigsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigsAsync() {
            this.GetConfigsAsync(null);
        }
        
        public void GetConfigsAsync(object userState) {
            if ((this.onBeginGetConfigsDelegate == null)) {
                this.onBeginGetConfigsDelegate = new BeginOperationDelegate(this.OnBeginGetConfigs);
            }
            if ((this.onEndGetConfigsDelegate == null)) {
                this.onEndGetConfigsDelegate = new EndOperationDelegate(this.OnEndGetConfigs);
            }
            if ((this.onGetConfigsCompletedDelegate == null)) {
                this.onGetConfigsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigsDelegate, null, this.onEndGetConfigsDelegate, this.onGetConfigsCompletedDelegate, userState);
        }
        
        public bool UpdateConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config) {
            return base.Channel.UpdateConfig(config);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateConfig(config, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateConfig(System.IAsyncResult result) {
            return base.Channel.EndUpdateConfig(result);
        }
        
        private System.IAsyncResult OnBeginUpdateConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            VPMobileSplashScreen.VPMobileService.VPMobileSettings config = ((VPMobileSplashScreen.VPMobileService.VPMobileSettings)(inValues[0]));
            return this.BeginUpdateConfig(config, callback, asyncState);
        }
        
        private object[] OnEndUpdateConfig(System.IAsyncResult result) {
            bool retVal = this.EndUpdateConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateConfigCompleted(object state) {
            if ((this.UpdateConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateConfigCompleted(this, new UpdateConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateConfigAsync(VPMobileSplashScreen.VPMobileService.VPMobileSettings config) {
            this.UpdateConfigAsync(config, null);
        }
        
        public void UpdateConfigAsync(VPMobileSplashScreen.VPMobileService.VPMobileSettings config, object userState) {
            if ((this.onBeginUpdateConfigDelegate == null)) {
                this.onBeginUpdateConfigDelegate = new BeginOperationDelegate(this.OnBeginUpdateConfig);
            }
            if ((this.onEndUpdateConfigDelegate == null)) {
                this.onEndUpdateConfigDelegate = new EndOperationDelegate(this.OnEndUpdateConfig);
            }
            if ((this.onUpdateConfigCompletedDelegate == null)) {
                this.onUpdateConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateConfigCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateConfigDelegate, new object[] {
                        config}, this.onEndUpdateConfigDelegate, this.onUpdateConfigCompletedDelegate, userState);
        }
        
        public bool AddConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config) {
            return base.Channel.AddConfig(config);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddConfig(VPMobileSplashScreen.VPMobileService.VPMobileSettings config, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddConfig(config, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddConfig(System.IAsyncResult result) {
            return base.Channel.EndAddConfig(result);
        }
        
        private System.IAsyncResult OnBeginAddConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            VPMobileSplashScreen.VPMobileService.VPMobileSettings config = ((VPMobileSplashScreen.VPMobileService.VPMobileSettings)(inValues[0]));
            return this.BeginAddConfig(config, callback, asyncState);
        }
        
        private object[] OnEndAddConfig(System.IAsyncResult result) {
            bool retVal = this.EndAddConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddConfigCompleted(object state) {
            if ((this.AddConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddConfigCompleted(this, new AddConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddConfigAsync(VPMobileSplashScreen.VPMobileService.VPMobileSettings config) {
            this.AddConfigAsync(config, null);
        }
        
        public void AddConfigAsync(VPMobileSplashScreen.VPMobileService.VPMobileSettings config, object userState) {
            if ((this.onBeginAddConfigDelegate == null)) {
                this.onBeginAddConfigDelegate = new BeginOperationDelegate(this.OnBeginAddConfig);
            }
            if ((this.onEndAddConfigDelegate == null)) {
                this.onEndAddConfigDelegate = new EndOperationDelegate(this.OnEndAddConfig);
            }
            if ((this.onAddConfigCompletedDelegate == null)) {
                this.onAddConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddConfigCompleted);
            }
            base.InvokeAsync(this.onBeginAddConfigDelegate, new object[] {
                        config}, this.onEndAddConfigDelegate, this.onAddConfigCompletedDelegate, userState);
        }
        
        public VPMobileSplashScreen.VPMobileService.RoutingFileInfo[] GetAllRoutingFileInfo() {
            return base.Channel.GetAllRoutingFileInfo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllRoutingFileInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllRoutingFileInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileSplashScreen.VPMobileService.RoutingFileInfo[] EndGetAllRoutingFileInfo(System.IAsyncResult result) {
            return base.Channel.EndGetAllRoutingFileInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetAllRoutingFileInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllRoutingFileInfo(callback, asyncState);
        }
        
        private object[] OnEndGetAllRoutingFileInfo(System.IAsyncResult result) {
            VPMobileSplashScreen.VPMobileService.RoutingFileInfo[] retVal = this.EndGetAllRoutingFileInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllRoutingFileInfoCompleted(object state) {
            if ((this.GetAllRoutingFileInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllRoutingFileInfoCompleted(this, new GetAllRoutingFileInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllRoutingFileInfoAsync() {
            this.GetAllRoutingFileInfoAsync(null);
        }
        
        public void GetAllRoutingFileInfoAsync(object userState) {
            if ((this.onBeginGetAllRoutingFileInfoDelegate == null)) {
                this.onBeginGetAllRoutingFileInfoDelegate = new BeginOperationDelegate(this.OnBeginGetAllRoutingFileInfo);
            }
            if ((this.onEndGetAllRoutingFileInfoDelegate == null)) {
                this.onEndGetAllRoutingFileInfoDelegate = new EndOperationDelegate(this.OnEndGetAllRoutingFileInfo);
            }
            if ((this.onGetAllRoutingFileInfoCompletedDelegate == null)) {
                this.onGetAllRoutingFileInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllRoutingFileInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllRoutingFileInfoDelegate, null, this.onEndGetAllRoutingFileInfoDelegate, this.onGetAllRoutingFileInfoCompletedDelegate, userState);
        }
        
        public bool DeleteConfig(string configName) {
            return base.Channel.DeleteConfig(configName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteConfig(string configName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteConfig(configName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteConfig(System.IAsyncResult result) {
            return base.Channel.EndDeleteConfig(result);
        }
        
        private System.IAsyncResult OnBeginDeleteConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string configName = ((string)(inValues[0]));
            return this.BeginDeleteConfig(configName, callback, asyncState);
        }
        
        private object[] OnEndDeleteConfig(System.IAsyncResult result) {
            bool retVal = this.EndDeleteConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteConfigCompleted(object state) {
            if ((this.DeleteConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteConfigCompleted(this, new DeleteConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteConfigAsync(string configName) {
            this.DeleteConfigAsync(configName, null);
        }
        
        public void DeleteConfigAsync(string configName, object userState) {
            if ((this.onBeginDeleteConfigDelegate == null)) {
                this.onBeginDeleteConfigDelegate = new BeginOperationDelegate(this.OnBeginDeleteConfig);
            }
            if ((this.onEndDeleteConfigDelegate == null)) {
                this.onEndDeleteConfigDelegate = new EndOperationDelegate(this.OnEndDeleteConfig);
            }
            if ((this.onDeleteConfigCompletedDelegate == null)) {
                this.onDeleteConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteConfigCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteConfigDelegate, new object[] {
                        configName}, this.onEndDeleteConfigDelegate, this.onDeleteConfigCompletedDelegate, userState);
        }
        
        public VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] GetMainUpdateFileList() {
            return base.Channel.GetMainUpdateFileList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMainUpdateFileList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMainUpdateFileList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] EndGetMainUpdateFileList(System.IAsyncResult result) {
            return base.Channel.EndGetMainUpdateFileList(result);
        }
        
        private System.IAsyncResult OnBeginGetMainUpdateFileList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetMainUpdateFileList(callback, asyncState);
        }
        
        private object[] OnEndGetMainUpdateFileList(System.IAsyncResult result) {
            VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] retVal = this.EndGetMainUpdateFileList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMainUpdateFileListCompleted(object state) {
            if ((this.GetMainUpdateFileListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMainUpdateFileListCompleted(this, new GetMainUpdateFileListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMainUpdateFileListAsync() {
            this.GetMainUpdateFileListAsync(null);
        }
        
        public void GetMainUpdateFileListAsync(object userState) {
            if ((this.onBeginGetMainUpdateFileListDelegate == null)) {
                this.onBeginGetMainUpdateFileListDelegate = new BeginOperationDelegate(this.OnBeginGetMainUpdateFileList);
            }
            if ((this.onEndGetMainUpdateFileListDelegate == null)) {
                this.onEndGetMainUpdateFileListDelegate = new EndOperationDelegate(this.OnEndGetMainUpdateFileList);
            }
            if ((this.onGetMainUpdateFileListCompletedDelegate == null)) {
                this.onGetMainUpdateFileListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMainUpdateFileListCompleted);
            }
            base.InvokeAsync(this.onBeginGetMainUpdateFileListDelegate, null, this.onEndGetMainUpdateFileListDelegate, this.onGetMainUpdateFileListCompletedDelegate, userState);
        }
        
        public VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] GetSplashUpdateFileList() {
            return base.Channel.GetSplashUpdateFileList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSplashUpdateFileList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSplashUpdateFileList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] EndGetSplashUpdateFileList(System.IAsyncResult result) {
            return base.Channel.EndGetSplashUpdateFileList(result);
        }
        
        private System.IAsyncResult OnBeginGetSplashUpdateFileList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSplashUpdateFileList(callback, asyncState);
        }
        
        private object[] OnEndGetSplashUpdateFileList(System.IAsyncResult result) {
            VPMobileSplashScreen.VPMobileService.UpdateFileInfo[] retVal = this.EndGetSplashUpdateFileList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSplashUpdateFileListCompleted(object state) {
            if ((this.GetSplashUpdateFileListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSplashUpdateFileListCompleted(this, new GetSplashUpdateFileListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSplashUpdateFileListAsync() {
            this.GetSplashUpdateFileListAsync(null);
        }
        
        public void GetSplashUpdateFileListAsync(object userState) {
            if ((this.onBeginGetSplashUpdateFileListDelegate == null)) {
                this.onBeginGetSplashUpdateFileListDelegate = new BeginOperationDelegate(this.OnBeginGetSplashUpdateFileList);
            }
            if ((this.onEndGetSplashUpdateFileListDelegate == null)) {
                this.onEndGetSplashUpdateFileListDelegate = new EndOperationDelegate(this.OnEndGetSplashUpdateFileList);
            }
            if ((this.onGetSplashUpdateFileListCompletedDelegate == null)) {
                this.onGetSplashUpdateFileListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSplashUpdateFileListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSplashUpdateFileListDelegate, null, this.onEndGetSplashUpdateFileListDelegate, this.onGetSplashUpdateFileListCompletedDelegate, userState);
        }
        
        public byte[] GetMainUpdateFile(string relativePath) {
            return base.Channel.GetMainUpdateFile(relativePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMainUpdateFile(string relativePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMainUpdateFile(relativePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetMainUpdateFile(System.IAsyncResult result) {
            return base.Channel.EndGetMainUpdateFile(result);
        }
        
        private System.IAsyncResult OnBeginGetMainUpdateFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string relativePath = ((string)(inValues[0]));
            return this.BeginGetMainUpdateFile(relativePath, callback, asyncState);
        }
        
        private object[] OnEndGetMainUpdateFile(System.IAsyncResult result) {
            byte[] retVal = this.EndGetMainUpdateFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMainUpdateFileCompleted(object state) {
            if ((this.GetMainUpdateFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMainUpdateFileCompleted(this, new GetMainUpdateFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMainUpdateFileAsync(string relativePath) {
            this.GetMainUpdateFileAsync(relativePath, null);
        }
        
        public void GetMainUpdateFileAsync(string relativePath, object userState) {
            if ((this.onBeginGetMainUpdateFileDelegate == null)) {
                this.onBeginGetMainUpdateFileDelegate = new BeginOperationDelegate(this.OnBeginGetMainUpdateFile);
            }
            if ((this.onEndGetMainUpdateFileDelegate == null)) {
                this.onEndGetMainUpdateFileDelegate = new EndOperationDelegate(this.OnEndGetMainUpdateFile);
            }
            if ((this.onGetMainUpdateFileCompletedDelegate == null)) {
                this.onGetMainUpdateFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMainUpdateFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetMainUpdateFileDelegate, new object[] {
                        relativePath}, this.onEndGetMainUpdateFileDelegate, this.onGetMainUpdateFileCompletedDelegate, userState);
        }
        
        public byte[] GetSplashUpdateFile(string relativePath) {
            return base.Channel.GetSplashUpdateFile(relativePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSplashUpdateFile(string relativePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSplashUpdateFile(relativePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetSplashUpdateFile(System.IAsyncResult result) {
            return base.Channel.EndGetSplashUpdateFile(result);
        }
        
        private System.IAsyncResult OnBeginGetSplashUpdateFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string relativePath = ((string)(inValues[0]));
            return this.BeginGetSplashUpdateFile(relativePath, callback, asyncState);
        }
        
        private object[] OnEndGetSplashUpdateFile(System.IAsyncResult result) {
            byte[] retVal = this.EndGetSplashUpdateFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSplashUpdateFileCompleted(object state) {
            if ((this.GetSplashUpdateFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSplashUpdateFileCompleted(this, new GetSplashUpdateFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSplashUpdateFileAsync(string relativePath) {
            this.GetSplashUpdateFileAsync(relativePath, null);
        }
        
        public void GetSplashUpdateFileAsync(string relativePath, object userState) {
            if ((this.onBeginGetSplashUpdateFileDelegate == null)) {
                this.onBeginGetSplashUpdateFileDelegate = new BeginOperationDelegate(this.OnBeginGetSplashUpdateFile);
            }
            if ((this.onEndGetSplashUpdateFileDelegate == null)) {
                this.onEndGetSplashUpdateFileDelegate = new EndOperationDelegate(this.OnEndGetSplashUpdateFile);
            }
            if ((this.onGetSplashUpdateFileCompletedDelegate == null)) {
                this.onGetSplashUpdateFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSplashUpdateFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetSplashUpdateFileDelegate, new object[] {
                        relativePath}, this.onEndGetSplashUpdateFileDelegate, this.onGetSplashUpdateFileCompletedDelegate, userState);
        }
    }
}
